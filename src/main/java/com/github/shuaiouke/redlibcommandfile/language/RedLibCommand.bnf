{
    parserClass="com.github.shuaiouke.redlibcommandfile.language.parser.RedLibCommandParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="RedLibCommand"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.shuaiouke.redlibcommandfile.language.psi"
    psiImplPackage="com.github.shuaiouke.redlibcommandfile.language.psi.impl"

    elementTypeHolderClass="com.github.shuaiouke.redlibcommandfile.language.psi.RedLibCommandTypes"
    elementTypeClass="com.github.shuaiouke.redlibcommandfile.language.psi.RedLibCommandElementType"
    tokenTypeClass="com.github.shuaiouke.redlibcommandfile.language.psi.RedLibCommandTokenType"

}

root ::= root_item*

private root_item ::= (CommandDef) | COMMENT

CommandDef ::= CommandDefinition | CommandDefinition_Consume | newline

CommandDefinition ::= SPACE* commandname (aliasseparator alias)* (SPACE Args)? newline? Open_Bracket (Line | Blank_Line)* Close_Bracket

CommandDefinition_Consume ::= SPACE* commandname (aliasseparator alias)* (SPACE Args_Consume)? newline? Open_Bracket (Line_Consume | Blank_Line)* Close_Bracket

Line ::= CommandProperty | CommandDef

Line_Consume ::= CommandProperty_Consume | CommandDef

Blank_Line ::= (SPACE* newline) | COMMENT

CommandProperty ::= (SPACE)* (HelpLine|PermissionLine|UserLine|HookLine|ContextLine|AssertLine|NoHelpLine|NoTabLine|PostArgLine|HelpMsgLine) newline

CommandProperty_Consume ::= (SPACE)* (HelpLine|PermissionLine|UserLine|HookLine|ContextLine|AssertLine|NoHelpLine|NoTabLine|HelpMsgLine) newline

//Help is a line for defining a command's subcommand "help"
HelpLine ::= help separator helpmessage (SPACE helpmessage)* {pin=2}

HelpMsgLine ::= helpmsg separator helpmsgkey (SPACE helpmessagekey)* {pin=2}

PermissionLine ::= permission separator PERMISSION_VALUE (DOT PERMISSION_VALUE)* {pin=2}

UserLine ::= user separator (player | console | everyone) {pin=2}

HookLine ::= hook separator hookname {pin=2}

NoHelpLine ::= nohelp

NoTabLine ::= notab

PostArgLine ::= postarg

ContextLine ::= context separator contextname (SPACE contextname) {pin=2}

AssertLine ::= assert separator assertname (SPACE assertname) {pin=2}

Open_Bracket ::= SPACE* OBRACKET newline
Close_Bracket ::= SPACE* CBRACKET (newline|<<eof>>)

Args_Consume ::= Arg* ConsumingArg (ARG_TYPE? Flag (newline | SPACE))*

Args ::= Arg*

Arg ::= ((ARG_TYPE? Flag) | (ARG_TYPE Argument)) (newline | SPACE)

ConsumingArg ::= ARG_TYPE_CONSUME Argument (newline | SPACE)

Flag ::= DASHES FLAG_NAME (COMMA DASHES FLAG_NAME)* FLAG_MODIFIER? (BRACKET_OPEN DEFAULT_VALUE? BRACKET_CLOSE)?

Argument ::= ARG_NAME (noshowtype | ((notrequired | bothmodifiers) ( BRACKET_OPEN DEFAULT_VALUE? BRACKET_CLOSE)? ))?

