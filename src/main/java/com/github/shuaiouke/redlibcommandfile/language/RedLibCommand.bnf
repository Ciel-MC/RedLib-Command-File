{
    parserClass="com.github.shuaiouke.redlibcommandfile.language.parser.RedLibCommandParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="RedLibCommand"
    psiImplClassSuffix="Impl"
    psiPackage="com.github.shuaiouke.redlibcommandfile.language.psi"
    psiImplPackage="com.github.shuaiouke.redlibcommandfile.language.psi.impl"

    elementTypeHolderClass="com.github.shuaiouke.redlibcommandfile.language.psi.RedLibCommandTypes"
    elementTypeClass="com.github.shuaiouke.redlibcommandfile.language.psi.RedLibCommandElementType"
    tokenTypeClass="com.github.shuaiouke.redlibcommandfile.language.psi.RedLibCommandTokenType"

}

root ::= root_item*

private root_item ::= (CommandDef_Base) | COMMENT

private CommandDef_Base ::= CommandDefinition_Base | CommandDefinition_Consuming_Base | newline

private CommandDef ::= CommandDefinition | CommandDefinition_Consuming | newline

private CommandDef_Consumed ::= CommandDefinition_Consumed | newline

private CommandDefinition ::= space* CommandName (comma Alias)* (space Args)? newline? Open_Bracket (Line | Blank_Line)* Close_Bracket

private CommandDefinition_Consuming ::= space* CommandName (comma Alias)* (space Args_Can_Consume)? newline? Open_Bracket (Line_Consumed | Blank_Line)* Close_Bracket

private CommandDefinition_Base ::= space* CommandName (comma Alias)* (space Args)? newline? Open_Bracket (Line_Base | Blank_Line)* Close_Bracket

private CommandDefinition_Consuming_Base ::= space* CommandName (comma Alias)* (space Args_Can_Consume)? newline? Open_Bracket (Line_Base_Consuming | Blank_Line)* Close_Bracket

private CommandDefinition_Consumed ::= space* CommandName (comma Alias)* (space Args_Can_Consume)? newline? Open_Bracket (Line_Consumed_Recovering | Blank_Line)* Close_Bracket

private CommandName ::= commandname|help|permission|user|hook|context|assert|nohelp|notab|postarg|hidesub|helpmsg

private Alias ::= alias|help|permission|user|hook|context|assert|nohelp|notab|postarg|hidesub|helpmsg

private Line ::= CommandProperty | CommandDef

private Line_Consumed ::= CommandProperty | CommandDef_Consumed

private Line_Consumed_Recovering ::= CommandProperty_Consumed | CommandDef

private Line_Base ::= CommandProperty_Base | CommandDef

private Line_Base_Consuming ::= CommandProperty_Base | CommandDefinition_Consumed

private Blank_Line ::= (space* newline) | COMMENT

private CommandProperty ::= (space)* (HelpLine|PermissionLine|UserLine|HookLine|ContextLine|AssertLine|NoHelpLine|NoTabLine|PostArgLine|HideSubLine|HelpMsgLine) newline

private CommandProperty_Consumed ::= (space)* (HelpLine|PermissionLine|UserLine|HookLine|ContextLine|AssertLine|NoHelpLine|NoTabLine|HideSubLine|HelpMsgLine) newline

private CommandProperty_Base ::= (space)* (HelpLine|PermissionLine|UserLine|HookLine|ContextLine|AssertLine|NoHelpLine|NoTabLine|HideSubLine|HelpMsgLine) newline

//Help is a line for defining a command's subcommand "help"
private HelpLine ::= help space helpmessage (space helpmessage)* {pin=2}

private HelpMsgLine ::= helpmsg space helpmsgkey (space helpmessagekey)* {pin=2}

private PermissionLine ::= permission space PERMISSION_VALUE (DOT PERMISSION_VALUE)* {pin=2}

private UserLine ::= user space (player | console | everyone) {pin=2}

private HookLine ::= hook space hookname {pin=2}

private NoHelpLine ::= nohelp

private NoTabLine ::= notab

private PostArgLine ::= postarg

private ContextLine ::= context space contextname (space contextname)* {pin=2}

private AssertLine ::= assert space assertname (space assertname)* {pin=2}

private HideSubLine ::= hidesub

private Open_Bracket ::= space* OBRACKET newline
private Close_Bracket ::= space* CBRACKET (newline|<<eof>>)

//Args_Consume ::= Arg*
private Args_Can_Consume ::= ConsumingArg*

private Args ::= Arg*

private Arg ::= (((ARG_TYPE CONSTRAINT? COLON)? Flag) | (ARG_TYPE CONSTRAINT? COLON Argument)) (newline | space |)

private ConsumingArg ::= ARG_TYPE CONSTRAINT? CONSUME_TOKEN? COLON Consuming_Argument (newline | space |)

private Flag ::= DASHES FLAG_NAME (COMMA DASHES FLAG_NAME)* FLAG_MODIFIER? (BRACKET_OPEN DEFAULT_VALUE? BRACKET_CLOSE)?

private Argument ::= ARG_NAME (noshowtype | ((notrequired | bothmodifiers) (BRACKET_OPEN DEFAULT_VALUE? BRACKET_CLOSE)? ))?

private Consuming_Argument ::= ARG_NAME (noshowtype | ((notrequired | bothmodifiers) ( BRACKET_OPEN DEFAULT_VALUE? BRACKET_CLOSE)? ))?

//(CONSTRAINT_OPEN CONSTRAINT? CONSTRAINT_CLOSE)?