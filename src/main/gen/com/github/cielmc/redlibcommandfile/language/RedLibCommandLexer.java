// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: RedLibCommandLexer.flex

package com.github.cielmc.redlibcommandfile.language;

import com.intellij.lexer.FlexLexer;
import com.github.cielmc.redlibcommandfile.language.psi.RedLibCommandTypes;
import com.intellij.psi.tree.IElementType;

import static com.github.cielmc.redlibcommandfile.language.psi.RedLibCommandTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;


public class RedLibCommandLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMAND = 2;
  public static final int NOARG = 4;
  public static final int HELP = 6;
  public static final int HELPVALUE = 8;
  public static final int HELPMSG = 10;
  public static final int HELPMSGVALUE = 12;
  public static final int PERMISSION = 14;
  public static final int PERMISSIONVALUE = 16;
  public static final int USER = 18;
  public static final int USERVALUE = 20;
  public static final int HOOK = 22;
  public static final int HOOKVALUE = 24;
  public static final int CONTEXT = 26;
  public static final int CONTEXTVALUE = 28;
  public static final int ASSERT = 30;
  public static final int ASSERTVALUE = 32;
  public static final int ARGS = 34;
  public static final int FLAG = 36;
  public static final int ARG = 38;
  public static final int DEFAULTVALUE = 40;
  public static final int POSTARGTYPE = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\7\0"+
    "\1\5\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\12\14\1\15\1\0\1\16\1\0\1\17\1\20\1\0"+
    "\32\14\1\21\1\22\1\23\1\0\1\14\1\0\1\24"+
    "\1\25\1\26\1\27\1\30\1\14\1\31\1\32\1\33"+
    "\1\14\1\34\1\35\1\36\1\37\1\40\1\41\1\14"+
    "\1\42\1\43\1\44\1\45\1\46\1\14\1\47\1\50"+
    "\1\14\1\51\1\0\1\52\7\0\1\3\32\0\1\1"+
    "\11\0\1\14\12\0\1\14\4\0\1\14\5\0\27\14"+
    "\1\0\37\14\1\0\u01ca\14\4\0\14\14\16\0\5\14"+
    "\7\0\1\14\1\0\1\14\21\0\165\14\1\0\2\14"+
    "\2\0\4\14\1\0\1\14\6\0\1\14\1\0\3\14"+
    "\1\0\1\14\1\0\24\14\1\0\123\14\1\0\213\14"+
    "\1\0\255\14\1\0\46\14\2\0\1\14\6\0\51\14"+
    "\10\0\55\14\1\0\1\14\1\0\2\14\1\0\2\14"+
    "\1\0\1\14\10\0\33\14\4\0\4\14\35\0\13\14"+
    "\5\0\112\14\4\0\146\14\1\0\10\14\2\0\12\14"+
    "\1\0\23\14\2\0\1\14\20\0\73\14\2\0\145\14"+
    "\16\0\66\14\4\0\1\14\2\0\1\14\2\0\56\14"+
    "\22\0\34\14\4\0\13\14\65\0\25\14\1\0\10\14"+
    "\25\0\17\14\1\0\201\14\2\0\12\14\1\0\23\14"+
    "\1\0\10\14\2\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\1\14\3\0\4\14\2\0\11\14\2\0\2\14"+
    "\2\0\4\14\10\0\1\14\4\0\2\14\1\0\5\14"+
    "\2\0\14\14\12\0\1\14\1\0\1\14\2\0\3\14"+
    "\1\0\6\14\4\0\2\14\2\0\26\14\1\0\7\14"+
    "\1\0\2\14\1\0\2\14\1\0\2\14\2\0\1\14"+
    "\1\0\5\14\4\0\2\14\2\0\3\14\3\0\1\14"+
    "\7\0\4\14\1\0\1\14\7\0\20\14\13\0\3\14"+
    "\1\0\11\14\1\0\3\14\1\0\26\14\1\0\7\14"+
    "\1\0\2\14\1\0\5\14\2\0\12\14\1\0\3\14"+
    "\1\0\3\14\2\0\1\14\17\0\4\14\2\0\12\14"+
    "\11\0\7\14\1\0\3\14\1\0\10\14\2\0\2\14"+
    "\2\0\26\14\1\0\7\14\1\0\2\14\1\0\5\14"+
    "\2\0\11\14\2\0\2\14\2\0\3\14\10\0\2\14"+
    "\4\0\2\14\1\0\5\14\2\0\12\14\1\0\1\14"+
    "\20\0\2\14\1\0\6\14\3\0\3\14\1\0\4\14"+
    "\3\0\2\14\1\0\1\14\1\0\2\14\3\0\2\14"+
    "\3\0\3\14\3\0\14\14\4\0\5\14\3\0\3\14"+
    "\1\0\4\14\2\0\1\14\6\0\1\14\16\0\12\14"+
    "\20\0\15\14\1\0\3\14\1\0\27\14\1\0\20\14"+
    "\3\0\10\14\1\0\3\14\1\0\4\14\7\0\2\14"+
    "\1\0\3\14\5\0\4\14\2\0\12\14\20\0\4\14"+
    "\1\0\10\14\1\0\3\14\1\0\27\14\1\0\12\14"+
    "\1\0\5\14\2\0\11\14\1\0\3\14\1\0\4\14"+
    "\7\0\2\14\7\0\1\14\1\0\4\14\2\0\12\14"+
    "\1\0\2\14\15\0\4\14\1\0\10\14\1\0\3\14"+
    "\1\0\63\14\1\0\3\14\1\0\5\14\5\0\4\14"+
    "\7\0\5\14\2\0\12\14\12\0\6\14\2\0\2\14"+
    "\1\0\22\14\3\0\30\14\1\0\11\14\1\0\1\14"+
    "\2\0\7\14\3\0\1\14\4\0\6\14\1\0\1\14"+
    "\1\0\10\14\6\0\12\14\2\0\2\14\15\0\72\14"+
    "\5\0\17\14\1\0\12\14\47\0\2\14\1\0\1\14"+
    "\1\0\5\14\1\0\30\14\1\0\1\14\1\0\27\14"+
    "\2\0\5\14\1\0\1\14\1\0\6\14\2\0\12\14"+
    "\2\0\4\14\40\0\1\14\27\0\2\14\6\0\12\14"+
    "\13\0\1\14\1\0\1\14\1\0\1\14\4\0\12\14"+
    "\1\0\44\14\4\0\24\14\1\0\22\14\1\0\44\14"+
    "\11\0\1\14\71\0\112\14\6\0\116\14\2\0\46\14"+
    "\1\0\1\14\5\0\1\14\2\0\53\14\1\0\115\14"+
    "\1\0\4\14\2\0\7\14\1\0\1\14\1\0\4\14"+
    "\2\0\51\14\1\0\4\14\2\0\41\14\1\0\4\14"+
    "\2\0\7\14\1\0\1\14\1\0\4\14\2\0\17\14"+
    "\1\0\71\14\1\0\4\14\2\0\103\14\2\0\3\14"+
    "\40\0\20\14\20\0\126\14\2\0\6\14\3\0\u016c\14"+
    "\2\0\21\14\1\1\32\14\5\0\113\14\3\0\13\14"+
    "\7\0\15\14\1\0\7\14\13\0\25\14\13\0\24\14"+
    "\14\0\15\14\1\0\3\14\1\0\2\14\14\0\124\14"+
    "\3\0\1\14\4\0\2\14\2\0\12\14\41\0\3\14"+
    "\2\0\12\14\6\0\131\14\7\0\53\14\5\0\106\14"+
    "\12\0\37\14\1\0\14\14\4\0\14\14\12\0\50\14"+
    "\2\0\5\14\13\0\54\14\4\0\32\14\6\0\12\14"+
    "\46\0\34\14\4\0\77\14\1\0\35\14\2\0\13\14"+
    "\6\0\12\14\15\0\1\14\10\0\17\14\101\0\114\14"+
    "\4\0\12\14\21\0\11\14\14\0\164\14\14\0\70\14"+
    "\10\0\12\14\3\0\61\14\2\0\11\14\7\0\53\14"+
    "\2\0\3\14\20\0\3\14\1\0\47\14\5\0\372\14"+
    "\1\0\33\14\2\0\6\14\2\0\46\14\2\0\6\14"+
    "\2\0\10\14\1\0\1\14\1\0\1\14\1\0\1\14"+
    "\1\0\37\14\2\0\65\14\1\0\7\14\1\0\1\14"+
    "\3\0\3\14\1\0\7\14\3\0\4\14\2\0\6\14"+
    "\4\0\15\14\5\0\3\14\1\0\7\14\3\0\13\1"+
    "\35\0\2\3\5\0\1\1\17\0\2\14\23\0\1\14"+
    "\12\0\1\1\21\0\1\14\15\0\1\14\20\0\15\14"+
    "\63\0\41\14\21\0\1\14\4\0\1\14\2\0\12\14"+
    "\1\0\1\14\3\0\5\14\6\0\1\14\1\0\1\14"+
    "\1\0\1\14\1\0\4\14\1\0\13\14\2\0\4\14"+
    "\5\0\5\14\4\0\1\14\21\0\51\14\u022d\0\64\14"+
    "\26\0\57\14\1\0\57\14\1\0\205\14\6\0\11\14"+
    "\14\0\46\14\1\0\1\14\5\0\1\14\2\0\70\14"+
    "\7\0\1\14\17\0\30\14\11\0\7\14\1\0\7\14"+
    "\1\0\7\14\1\0\7\14\1\0\7\14\1\0\7\14"+
    "\1\0\7\14\1\0\7\14\1\0\40\14\57\0\1\14"+
    "\320\0\1\1\4\0\3\14\31\0\17\14\1\0\5\14"+
    "\2\0\5\14\4\0\126\14\2\0\2\14\2\0\3\14"+
    "\1\0\132\14\1\0\4\14\5\0\53\14\1\0\136\14"+
    "\21\0\33\14\65\0\306\14\112\0\360\14\20\0\215\14"+
    "\103\0\56\14\2\0\15\14\3\0\34\14\24\0\63\14"+
    "\1\0\12\14\1\0\163\14\45\0\11\14\2\0\147\14"+
    "\2\0\65\14\2\0\5\14\60\0\61\14\30\0\64\14"+
    "\14\0\106\14\12\0\12\14\6\0\30\14\3\0\1\14"+
    "\1\0\61\14\2\0\44\14\14\0\35\14\3\0\101\14"+
    "\16\0\13\14\6\0\37\14\1\0\67\14\11\0\16\14"+
    "\2\0\12\14\6\0\27\14\3\0\111\14\30\0\3\14"+
    "\2\0\20\14\2\0\5\14\12\0\6\14\2\0\6\14"+
    "\2\0\6\14\11\0\7\14\1\0\7\14\1\0\53\14"+
    "\1\0\14\14\10\0\173\14\1\0\2\14\2\0\12\14"+
    "\6\0\244\14\14\0\27\14\4\0\61\14\4\0\u0100\53"+
    "\156\14\2\0\152\14\46\0\7\14\14\0\5\14\5\0"+
    "\14\14\1\0\15\14\1\0\5\14\1\0\1\14\1\0"+
    "\2\14\1\0\2\14\1\0\154\14\41\0\153\14\22\0"+
    "\100\14\2\0\66\14\50\0\14\14\4\0\20\14\20\0"+
    "\20\14\3\0\2\14\30\0\3\14\40\0\5\14\1\0"+
    "\207\14\23\0\12\14\7\0\32\14\4\0\1\14\1\0"+
    "\32\14\13\0\131\14\3\0\6\14\2\0\6\14\2\0"+
    "\6\14\2\0\3\14\43\0\14\14\1\0\32\14\1\0"+
    "\23\14\1\0\2\14\1\0\17\14\2\0\16\14\42\0"+
    "\173\14\105\0\65\14\210\0\1\14\202\0\35\14\3\0"+
    "\61\14\17\0\1\14\37\0\40\14\15\0\36\14\5\0"+
    "\53\14\5\0\36\14\2\0\44\14\4\0\10\14\1\0"+
    "\5\14\52\0\236\14\2\0\12\14\6\0\44\14\4\0"+
    "\44\14\4\0\50\14\10\0\64\14\234\0\67\14\11\0"+
    "\26\14\12\0\10\14\230\0\6\14\2\0\1\14\1\0"+
    "\54\14\1\0\2\14\3\0\1\14\2\0\27\14\12\0"+
    "\27\14\11\0\37\14\101\0\23\14\1\0\2\14\12\0"+
    "\26\14\12\0\32\14\106\0\70\14\6\0\2\14\100\0"+
    "\4\14\1\0\2\14\5\0\10\14\1\0\3\14\1\0"+
    "\35\14\2\0\3\14\4\0\1\14\40\0\35\14\3\0"+
    "\35\14\43\0\10\14\1\0\36\14\31\0\66\14\12\0"+
    "\26\14\12\0\23\14\15\0\22\14\156\0\111\14\67\0"+
    "\63\14\15\0\63\14\15\0\50\14\10\0\12\14\306\0"+
    "\35\14\12\0\1\14\10\0\41\14\217\0\27\14\11\0"+
    "\107\14\37\0\12\14\17\0\74\14\25\0\31\14\7\0"+
    "\12\14\6\0\65\14\1\0\12\14\4\0\3\14\11\0"+
    "\44\14\2\0\1\14\11\0\105\14\4\0\4\14\3\0"+
    "\13\14\1\0\1\14\43\0\22\14\1\0\45\14\6\0"+
    "\1\14\101\0\7\14\1\0\1\14\1\0\4\14\1\0"+
    "\17\14\1\0\12\14\7\0\73\14\5\0\12\14\6\0"+
    "\4\14\1\0\10\14\2\0\2\14\2\0\26\14\1\0"+
    "\7\14\1\0\2\14\1\0\5\14\1\0\12\14\2\0"+
    "\2\14\2\0\3\14\2\0\1\14\6\0\1\14\5\0"+
    "\7\14\2\0\7\14\3\0\5\14\213\0\113\14\5\0"+
    "\12\14\4\0\2\14\40\0\106\14\1\0\1\14\10\0"+
    "\12\14\246\0\66\14\2\0\11\14\27\0\6\14\42\0"+
    "\101\14\3\0\1\14\13\0\12\14\46\0\71\14\7\0"+
    "\12\14\66\0\33\14\2\0\17\14\4\0\12\14\306\0"+
    "\73\14\145\0\112\14\25\0\1\14\240\0\10\14\2\0"+
    "\56\14\2\0\10\14\1\0\2\14\33\0\77\14\10\0"+
    "\1\14\10\0\112\14\3\0\1\14\42\0\71\14\7\0"+
    "\11\14\1\0\55\14\1\0\11\14\17\0\12\14\30\0"+
    "\36\14\2\0\26\14\1\0\16\14\111\0\7\14\1\0"+
    "\2\14\1\0\54\14\3\0\1\14\1\0\2\14\1\0"+
    "\11\14\10\0\12\14\6\0\6\14\1\0\2\14\1\0"+
    "\45\14\1\0\2\14\1\0\6\14\7\0\12\14\u0136\0"+
    "\27\14\11\0\232\14\146\0\157\14\21\0\304\14\274\0"+
    "\57\14\321\0\107\14\271\0\71\14\7\0\37\14\1\0"+
    "\12\14\146\0\36\14\2\0\5\14\13\0\67\14\11\0"+
    "\4\14\14\0\12\14\11\0\25\14\5\0\23\14\260\0"+
    "\100\14\200\0\113\14\4\0\71\14\7\0\21\14\100\0"+
    "\2\14\1\0\1\14\34\0\370\14\10\0\363\14\15\0"+
    "\37\14\61\0\3\14\21\0\4\14\10\0\u018c\14\4\0"+
    "\153\14\5\0\15\14\3\0\11\14\7\0\12\14\3\0"+
    "\2\14\306\0\5\14\3\0\6\14\10\0\10\14\2\0"+
    "\7\14\36\0\4\14\224\0\3\14\273\0\125\14\1\0"+
    "\107\14\1\0\2\14\2\0\1\14\2\0\2\14\2\0"+
    "\4\14\1\0\14\14\1\0\1\14\1\0\7\14\1\0"+
    "\101\14\1\0\4\14\2\0\10\14\1\0\7\14\1\0"+
    "\34\14\1\0\4\14\1\0\5\14\1\0\1\14\3\0"+
    "\7\14\1\0\u0154\14\2\0\31\14\1\0\31\14\1\0"+
    "\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0"+
    "\37\14\1\0\31\14\1\0\37\14\1\0\31\14\1\0"+
    "\10\14\2\0\151\14\4\0\62\14\10\0\1\14\16\0"+
    "\1\14\26\0\5\14\1\0\17\14\120\0\7\14\1\0"+
    "\21\14\2\0\7\14\1\0\2\14\1\0\5\14\325\0"+
    "\55\14\3\0\16\14\2\0\12\14\4\0\1\14\u0171\0"+
    "\72\14\6\0\305\14\13\0\7\14\51\0\114\14\4\0"+
    "\12\14\246\0\4\14\1\0\33\14\1\0\2\14\1\0"+
    "\1\14\2\0\1\14\1\0\12\14\1\0\4\14\1\0"+
    "\1\14\1\0\1\14\6\0\1\14\4\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\3\14\1\0\2\14\1\0"+
    "\1\14\2\0\1\14\1\0\1\14\1\0\1\14\1\0"+
    "\1\14\1\0\1\14\1\0\2\14\1\0\1\14\2\0"+
    "\4\14\1\0\7\14\1\0\4\14\1\0\4\14\1\0"+
    "\1\14\1\0\12\14\1\0\21\14\5\0\3\14\1\0"+
    "\5\14\1\0\21\14\164\0\32\14\6\0\32\14\6\0"+
    "\32\14\166\0\327\14\51\0\65\14\13\0\336\14\2\0"+
    "\u0182\14\16\0\u0131\14\37\0\36\14\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\0\1\2\15\0\1\3\1\0\1\4"+
    "\1\5\1\6\1\4\7\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\1\1\15\1\14\1\17\1\2"+
    "\1\15\1\14\1\20\1\21\1\22\1\23\3\4\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\4"+
    "\1\34\1\35\2\4\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\2\3\1\46\1\47\11\7\5\0"+
    "\1\50\1\0\1\51\1\52\12\7\3\0\1\50\2\7"+
    "\1\53\1\7\1\54\4\7\1\55\3\0\5\7\1\56"+
    "\2\7\3\0\1\57\3\7\1\60\2\7\2\0\1\61"+
    "\1\62\1\63\1\64\1\7\1\65\1\66\1\0\1\7"+
    "\1\67\1\7\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268\0\u0294"+
    "\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c\0\u03c8\0\u03c8"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\u03c8\0\u03c8\0\u03c8\0\u0554\0\u03c8\0\u03c8\0\u03c8"+
    "\0\u0580\0\u0580\0\u0580\0\u03c8\0\u05ac\0\u05ac\0\u05ac\0\u03c8"+
    "\0\u03c8\0\u05d8\0\u03c8\0\u0604\0\u0630\0\u065c\0\u03c8\0\u0688"+
    "\0\u03c8\0\u06b4\0\u03c8\0\u06e0\0\u03c8\0\u070c\0\u0738\0\u0764"+
    "\0\u03c8\0\u0790\0\u07bc\0\u03c8\0\u03c8\0\u07e8\0\u0814\0\u03c8"+
    "\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974"+
    "\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0790\0\u03c8\0\u0bb0\0\u03c8"+
    "\0\u03c8\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0790\0\u0e18"+
    "\0\u0e44\0\u0e70\0\u0e9c\0\u0420\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c"+
    "\0\u0420\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u10ac\0\u0420\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u0420"+
    "\0\u11b4\0\u11e0\0\u120c\0\u0420\0\u1238\0\u1264\0\u1290\0\u12bc"+
    "\0\u03c8\0\u0420\0\u0420\0\u0420\0\u12e8\0\u0420\0\u03c8\0\u1314"+
    "\0\u1340\0\u03c8\0\u136c\0\u0420";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\1\31\1\30\1\31\6\27\1\32\1\33"+
    "\7\27\1\34\1\33\1\35\3\33\1\36\4\33\1\37"+
    "\1\33\1\40\3\33\1\41\3\33\1\27\1\42\2\27"+
    "\1\43\1\31\1\43\1\31\3\27\1\44\3\27\1\45"+
    "\7\27\25\45\1\46\3\27\1\30\1\47\1\30\1\47"+
    "\44\27\1\46\3\27\1\50\1\47\1\50\1\47\47\27"+
    "\2\51\1\47\1\51\1\52\44\51\1\53\2\51\1\27"+
    "\1\54\1\47\1\54\1\47\47\27\2\55\1\47\1\55"+
    "\1\56\44\55\1\57\2\55\1\27\1\60\1\47\1\60"+
    "\1\47\51\27\1\47\1\27\1\47\5\27\1\61\1\27"+
    "\1\62\7\27\25\62\1\46\3\27\1\63\1\47\1\63"+
    "\1\47\51\27\1\47\1\27\1\47\21\27\1\64\1\27"+
    "\1\65\10\27\1\66\7\27\1\46\3\27\1\67\1\47"+
    "\1\67\1\47\51\27\1\47\1\27\1\47\7\27\1\70"+
    "\7\27\25\70\1\46\3\27\1\71\1\47\1\71\1\47"+
    "\50\27\1\30\1\47\1\30\1\47\7\27\1\72\7\27"+
    "\25\72\1\46\3\27\1\73\1\47\1\73\1\47\50\27"+
    "\1\30\1\47\1\30\1\47\7\27\1\74\7\27\25\74"+
    "\1\46\3\27\1\30\1\75\1\30\1\75\4\27\1\76"+
    "\1\77\1\27\1\100\1\101\1\102\2\27\1\103\2\27"+
    "\25\100\1\46\3\27\4\43\1\104\1\27\1\105\1\44"+
    "\1\106\2\27\1\107\7\27\25\107\4\27\1\43\1\75"+
    "\1\43\1\75\1\104\1\110\1\111\4\27\1\112\3\27"+
    "\1\113\3\27\25\112\3\27\2\114\1\27\2\114\1\27"+
    "\1\110\13\114\1\115\31\114\2\27\1\75\1\27\1\75"+
    "\4\27\1\76\2\27\1\116\7\27\25\116\3\27\67\0"+
    "\1\117\51\0\1\33\2\0\1\33\7\0\25\33\14\0"+
    "\1\33\2\0\1\33\7\0\17\33\1\120\5\33\14\0"+
    "\1\33\2\0\1\33\7\0\14\33\1\121\10\33\14\0"+
    "\1\33\2\0\1\33\7\0\4\33\1\122\2\33\1\123"+
    "\4\33\1\124\10\33\14\0\1\33\2\0\1\33\7\0"+
    "\14\33\1\125\10\33\14\0\1\33\2\0\1\33\7\0"+
    "\4\33\1\126\7\33\1\127\10\33\14\0\1\33\2\0"+
    "\1\33\7\0\17\33\1\130\5\33\14\0\1\45\2\0"+
    "\1\45\7\0\25\45\3\0\2\51\1\0\51\51\2\55"+
    "\1\0\51\55\11\0\1\62\2\0\1\62\7\0\25\62"+
    "\43\0\1\131\61\0\1\132\42\0\1\133\27\0\1\70"+
    "\2\0\1\70\7\0\25\70\14\0\1\72\2\0\1\72"+
    "\7\0\25\72\14\0\1\74\2\0\1\74\7\0\25\74"+
    "\14\0\1\76\54\0\1\134\55\0\1\100\7\0\25\100"+
    "\3\0\2\135\1\0\13\135\1\0\1\136\2\135\1\137"+
    "\31\135\23\0\1\140\41\0\1\106\53\0\1\107\2\0"+
    "\1\107\7\0\25\107\23\0\1\141\44\0\1\112\2\0"+
    "\1\112\7\0\25\112\12\0\1\141\44\0\2\114\1\0"+
    "\2\114\2\0\13\114\1\115\33\114\1\0\17\114\1\115"+
    "\31\114\11\0\1\116\2\0\1\116\7\0\25\116\3\0"+
    "\2\117\3\0\46\117\12\0\1\33\2\0\1\33\7\0"+
    "\17\33\1\142\5\33\14\0\1\33\2\0\1\33\7\0"+
    "\13\33\1\143\11\33\14\0\1\33\2\0\1\33\7\0"+
    "\11\33\1\144\13\33\14\0\1\33\2\0\1\33\7\0"+
    "\3\33\1\145\21\33\14\0\1\33\2\0\1\33\7\0"+
    "\14\33\1\146\10\33\14\0\1\33\2\0\1\33\7\0"+
    "\6\33\1\147\11\33\1\150\4\33\14\0\1\33\2\0"+
    "\1\33\7\0\16\33\1\151\6\33\14\0\1\33\2\0"+
    "\1\33\7\0\17\33\1\152\5\33\14\0\1\33\2\0"+
    "\1\33\7\0\4\33\1\153\20\33\42\0\1\154\44\0"+
    "\1\155\47\0\1\156\41\0\1\140\41\0\2\135\1\0"+
    "\14\135\1\157\2\135\1\137\31\135\11\0\1\33\2\0"+
    "\1\33\7\0\4\33\1\160\20\33\14\0\1\33\2\0"+
    "\1\33\7\0\20\33\1\161\4\33\14\0\1\33\2\0"+
    "\1\33\7\0\15\33\1\162\7\33\14\0\1\33\2\0"+
    "\1\33\7\0\4\33\1\163\20\33\14\0\1\33\2\0"+
    "\1\33\7\0\10\33\1\164\14\33\14\0\1\33\2\0"+
    "\1\33\7\0\4\33\1\165\20\33\14\0\1\33\2\0"+
    "\1\33\7\0\1\166\24\33\14\0\1\33\2\0\1\33"+
    "\7\0\12\33\1\167\12\33\14\0\1\33\2\0\1\33"+
    "\7\0\20\33\1\170\4\33\14\0\1\33\2\0\1\33"+
    "\7\0\16\33\1\171\6\33\46\0\1\172\52\0\1\173"+
    "\61\0\1\174\14\0\1\33\2\0\1\33\7\0\16\33"+
    "\1\175\6\33\14\0\1\33\2\0\1\33\7\0\4\33"+
    "\1\176\20\33\14\0\1\33\2\0\1\33\7\0\12\33"+
    "\1\177\12\33\14\0\1\33\2\0\1\33\7\0\17\33"+
    "\1\200\5\33\14\0\1\33\2\0\1\33\7\0\11\33"+
    "\1\201\13\33\14\0\1\33\2\0\1\33\7\0\1\33"+
    "\1\202\23\33\14\0\1\33\2\0\1\33\7\0\7\33"+
    "\1\203\15\33\14\0\1\33\2\0\1\33\7\0\1\204"+
    "\24\33\43\0\1\205\63\0\1\206\33\0\1\207\34\0"+
    "\1\33\2\0\1\33\7\0\20\33\1\210\4\33\14\0"+
    "\1\33\2\0\1\33\7\0\23\33\1\211\1\33\14\0"+
    "\1\33\2\0\1\33\7\0\17\33\1\212\5\33\14\0"+
    "\1\33\2\0\1\33\7\0\21\33\1\213\3\33\14\0"+
    "\1\33\2\0\1\33\7\0\15\33\1\214\7\33\14\0"+
    "\1\33\2\0\1\33\7\0\17\33\1\215\5\33\14\0"+
    "\1\33\2\0\1\33\7\0\16\33\1\216\6\33\40\0"+
    "\1\217\56\0\1\220\55\0\1\221\22\0\1\33\2\0"+
    "\1\33\7\0\20\33\1\222\4\33\14\0\1\33\2\0"+
    "\1\33\7\0\5\33\1\223\17\33\14\0\1\33\2\0"+
    "\1\33\7\0\1\33\1\224\23\33\14\0\1\33\2\0"+
    "\1\33\7\0\17\33\1\225\5\33\14\0\1\33\2\0"+
    "\1\33\7\0\5\33\1\226\17\33\33\0\1\227\62\0"+
    "\1\230\25\0\1\33\2\0\1\33\7\0\7\33\1\231"+
    "\15\33\33\0\1\232\34\0\1\33\2\0\1\33\7\0"+
    "\14\33\1\233\10\33\14\0\1\33\2\0\1\33\7\0"+
    "\13\33\1\234\11\33\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5016];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\0\1\1\15\0\1\1\1\0\3\11"+
    "\10\1\3\11\1\1\3\11\3\1\1\11\3\1\2\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\20\1\5\0\1\11\1\0\2\11\12\1\3\0\13\1"+
    "\3\0\10\1\3\0\7\1\2\0\1\11\5\1\1\11"+
    "\1\0\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[156];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public RedLibCommandLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RedLibCommandLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return HELPMESSAGE;
            }
          // fall through
          case 57: break;
          case 2:
            { return HELPMSGKEY;
            }
          // fall through
          case 58: break;
          case 3:
            { return DEFAULT_VALUE;
            }
          // fall through
          case 59: break;
          case 4:
            { return BAD_CHARACTER;
            }
          // fall through
          case 60: break;
          case 5:
            { return SPACE;
            }
          // fall through
          case 61: break;
          case 6:
            { return NEWLINE;
            }
          // fall through
          case 62: break;
          case 7:
            { yybegin(COMMAND);return COMMANDNAME;
            }
          // fall through
          case 63: break;
          case 8:
            { return CBRACKET;
            }
          // fall through
          case 64: break;
          case 9:
            { yybegin(ARGS);return SPACE;
            }
          // fall through
          case 65: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 66: break;
          case 11:
            { return ALIAS;
            }
          // fall through
          case 67: break;
          case 12:
            { yybegin(YYINITIAL);return OBRACKET;
            }
          // fall through
          case 68: break;
          case 13:
            { yybegin(YYINITIAL);return NEWLINE;
            }
          // fall through
          case 69: break;
          case 14:
            { yybegin(HELPVALUE);return SPACE;
            }
          // fall through
          case 70: break;
          case 15:
            { yybegin(HELPMSGVALUE);return SPACE;
            }
          // fall through
          case 71: break;
          case 16:
            { yybegin(PERMISSIONVALUE);return SPACE;
            }
          // fall through
          case 72: break;
          case 17:
            { return DOT;
            }
          // fall through
          case 73: break;
          case 18:
            { return PERMISSION_VALUE;
            }
          // fall through
          case 74: break;
          case 19:
            { yybegin(USERVALUE);return SPACE;
            }
          // fall through
          case 75: break;
          case 20:
            { yybegin(HOOKVALUE);return SPACE;
            }
          // fall through
          case 76: break;
          case 21:
            { return HOOKNAME;
            }
          // fall through
          case 77: break;
          case 22:
            { yybegin(CONTEXTVALUE);return SPACE;
            }
          // fall through
          case 78: break;
          case 23:
            { return CONTEXTNAME;
            }
          // fall through
          case 79: break;
          case 24:
            { yybegin(ASSERTVALUE);return SPACE;
            }
          // fall through
          case 80: break;
          case 25:
            { return ASSERTNAME;
            }
          // fall through
          case 81: break;
          case 26:
            { yybegin(COMMAND);return NEWLINE;
            }
          // fall through
          case 82: break;
          case 27:
            { yybegin(FLAG);return DASHES;
            }
          // fall through
          case 83: break;
          case 28:
            { return ARG_TYPE;
            }
          // fall through
          case 84: break;
          case 29:
            { yybegin(POSTARGTYPE);return COLON;
            }
          // fall through
          case 85: break;
          case 30:
            { yybegin(DEFAULTVALUE);return BRACKET_OPEN;
            }
          // fall through
          case 86: break;
          case 31:
            { return FLAG_MODIFIER;
            }
          // fall through
          case 87: break;
          case 32:
            { return DASHES;
            }
          // fall through
          case 88: break;
          case 33:
            { return FLAG_NAME;
            }
          // fall through
          case 89: break;
          case 34:
            { yybegin(ARGS);return BRACKET_CLOSE;
            }
          // fall through
          case 90: break;
          case 35:
            { return NOSHOWTYPE;
            }
          // fall through
          case 91: break;
          case 36:
            { return ARG_NAME;
            }
          // fall through
          case 92: break;
          case 37:
            { return NOTREQUIRED;
            }
          // fall through
          case 93: break;
          case 38:
            { yybegin(ARG);return ARG_NAME;
            }
          // fall through
          case 94: break;
          case 39:
            { return COMMENT;
            }
          // fall through
          case 95: break;
          case 40:
            { return CONSTRAINT;
            }
          // fall through
          case 96: break;
          case 41:
            { return CONSUME_TOKEN;
            }
          // fall through
          case 97: break;
          case 42:
            { return BOTHMODIFIERS;
            }
          // fall through
          case 98: break;
          case 43:
            { yybegin(HELP);return RedLibCommandTypes.HELP;
            }
          // fall through
          case 99: break;
          case 44:
            { yybegin(HOOK);return RedLibCommandTypes.HOOK;
            }
          // fall through
          case 100: break;
          case 45:
            { yybegin(USER);return RedLibCommandTypes.USER;
            }
          // fall through
          case 101: break;
          case 46:
            { yybegin(NOARG);return NOTAB;
            }
          // fall through
          case 102: break;
          case 47:
            { yybegin(ASSERT);return RedLibCommandTypes.ASSERT;
            }
          // fall through
          case 103: break;
          case 48:
            { yybegin(NOARG);return NOHELP;
            }
          // fall through
          case 104: break;
          case 49:
            { return PLAYER;
            }
          // fall through
          case 105: break;
          case 50:
            { yybegin(CONTEXT);return RedLibCommandTypes.CONTEXT;
            }
          // fall through
          case 106: break;
          case 51:
            { yybegin(HELPMSG);return RedLibCommandTypes.HELPMSG;
            }
          // fall through
          case 107: break;
          case 52:
            { yybegin(NOARG);return HIDESUB;
            }
          // fall through
          case 108: break;
          case 53:
            { yybegin(NOARG);return POSTARG;
            }
          // fall through
          case 109: break;
          case 54:
            { return CONSOLE;
            }
          // fall through
          case 110: break;
          case 55:
            { return EVERYONE;
            }
          // fall through
          case 111: break;
          case 56:
            { yybegin(PERMISSION);return RedLibCommandTypes.PERMISSION;
            }
          // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
