/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.github.shuaiouke.redlibcommandfile.language;

import com.github.shuaiouke.redlibcommandfile.language.psi.RedLibCommandTypes;import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.github.shuaiouke.redlibcommandfile.language.psi.RedLibCommandTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>RedLibCommandLexer.flex</tt>
 */
public class RedLibCommandLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMAND = 2;
  public static final int NOARG = 4;
  public static final int HELP = 6;
  public static final int HELPVALUE = 8;
  public static final int PERMISSION = 10;
  public static final int PERMISSIONVALUE = 12;
  public static final int USER = 14;
  public static final int USERVALUE = 16;
  public static final int HOOK = 18;
  public static final int HOOKVALUE = 20;
  public static final int CONTEXT = 22;
  public static final int CONTEXTVALUE = 24;
  public static final int ASSERT = 26;
  public static final int ASSERTVALUE = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\4\1\13\1\24\1\4\1\13\1\25\1\4\1\13\1\26\1\27\1\13\1\30\1\31\1\1\1\30\4"+
    "\13\1\32\6\13\1\33\1\34\1\35\1\1\3\13\1\36\6\13\1\16\3\13\1\37\2\13\1\40\1"+
    "\1\1\13\1\41\4\1\1\13\1\42\1\1\1\43\1\22\7\13\1\44\1\4\1\33\1\45\1\34\1\46"+
    "\1\47\1\50\1\44\1\16\1\51\1\45\1\34\1\52\1\53\1\54\1\55\1\56\1\57\1\22\1\34"+
    "\1\60\1\61\1\62\1\44\1\63\1\64\1\45\1\34\1\60\1\65\1\66\1\44\1\67\1\70\1\71"+
    "\1\72\1\32\1\73\1\74\1\55\1\1\1\75\1\76\1\34\1\77\1\100\1\101\1\44\1\1\1\75"+
    "\1\76\1\34\1\102\1\100\1\103\1\44\1\104\1\105\1\76\1\13\1\36\1\106\1\107\1"+
    "\44\1\110\1\111\1\112\1\13\1\113\1\114\1\115\1\55\1\116\1\4\2\13\1\30\1\117"+
    "\1\3\2\1\1\120\1\121\1\122\1\123\1\124\1\125\2\1\1\62\1\126\1\3\1\127\1\130"+
    "\1\13\1\131\1\4\1\132\1\130\1\13\1\131\1\133\3\1\4\13\1\3\4\13\1\40\2\13\1"+
    "\134\2\13\1\135\24\13\1\136\1\137\2\13\1\136\2\13\1\140\1\141\1\14\3\13\1"+
    "\141\3\13\1\36\2\1\1\13\1\1\5\13\1\142\1\4\45\13\1\35\1\13\1\143\1\30\4\13"+
    "\1\144\1\145\1\146\1\147\1\13\1\147\1\13\1\150\1\146\1\151\5\13\1\152\1\3"+
    "\1\1\1\153\1\3\5\13\1\25\2\13\1\30\4\13\1\56\1\13\1\117\2\41\1\55\1\13\1\40"+
    "\1\147\2\13\1\41\1\13\2\3\2\1\1\13\1\41\3\13\1\117\1\13\1\35\2\3\1\154\1\117"+
    "\4\1\4\13\1\41\1\3\1\155\1\150\7\13\1\150\3\13\1\25\1\77\2\13\1\40\1\145\4"+
    "\1\1\156\1\13\1\157\17\13\1\160\21\13\1\142\2\13\1\142\1\161\1\13\1\40\3\13"+
    "\1\162\1\163\1\164\1\131\1\163\1\165\1\1\1\166\1\167\1\62\1\170\1\1\1\171"+
    "\1\1\1\131\3\1\2\13\1\62\1\172\1\173\1\174\1\125\1\175\1\1\2\13\1\145\62\1"+
    "\1\55\2\13\1\3\161\1\2\13\1\117\2\13\1\117\10\13\1\176\1\150\2\13\1\134\3"+
    "\13\1\177\1\167\1\13\1\200\4\201\2\13\2\1\1\167\35\1\1\202\1\1\1\4\1\203\1"+
    "\4\4\13\1\204\1\4\4\13\1\135\1\205\1\13\1\40\1\4\4\13\1\117\1\1\1\13\1\30"+
    "\3\1\1\13\40\1\133\13\1\56\4\1\135\13\1\56\2\1\10\13\1\131\4\1\2\13\1\40\20"+
    "\13\1\131\1\13\1\41\1\1\3\13\1\206\7\13\1\16\1\1\1\207\1\210\5\13\1\211\1"+
    "\13\1\117\1\25\3\1\1\207\2\13\1\25\1\1\3\13\1\150\4\13\1\56\1\3\1\13\1\212"+
    "\2\13\1\40\2\13\1\150\1\13\1\131\4\13\1\213\1\3\1\13\1\117\3\13\1\200\1\40"+
    "\1\3\1\13\1\112\4\13\1\31\1\153\1\13\1\214\1\215\1\216\1\201\2\13\1\135\1"+
    "\56\7\13\1\217\1\3\72\13\1\150\1\13\1\220\2\13\1\41\20\1\26\13\1\40\6\13\1"+
    "\3\2\1\1\200\1\221\1\34\1\222\1\223\6\13\1\16\1\1\1\224\25\13\1\40\1\1\4\13"+
    "\1\210\2\13\1\25\2\1\1\41\1\13\1\1\1\13\1\225\1\226\2\1\1\132\7\13\1\131\1"+
    "\1\1\3\1\4\1\5\1\4\1\30\1\55\4\13\1\117\1\227\1\230\2\1\1\231\1\13\1\14\1"+
    "\232\2\40\2\1\7\13\1\30\4\1\3\13\1\147\7\1\1\233\10\1\1\13\1\131\3\13\2\62"+
    "\1\1\2\13\1\1\1\13\1\30\2\13\1\30\1\13\1\40\2\13\1\234\1\235\2\1\11\13\1\40"+
    "\1\3\2\13\1\234\1\13\1\41\2\13\1\25\3\13\1\150\11\1\23\13\1\200\1\13\1\56"+
    "\1\25\11\1\1\236\2\13\1\237\1\13\1\56\1\13\1\200\1\13\1\117\4\1\1\13\1\240"+
    "\1\13\1\56\1\13\1\3\4\1\3\13\1\241\4\1\1\242\1\243\1\13\1\244\2\1\1\13\1\131"+
    "\1\13\1\131\2\1\1\130\1\13\1\200\1\1\3\13\1\56\1\13\1\56\1\13\1\31\1\13\1"+
    "\16\6\1\4\13\1\145\3\1\3\13\1\31\3\13\1\31\60\1\4\13\1\200\1\1\1\55\1\167"+
    "\3\13\1\30\1\1\1\13\1\145\1\3\3\13\1\132\1\1\2\13\1\245\4\13\1\246\1\247\2"+
    "\1\1\13\1\22\1\13\1\250\4\1\1\251\1\26\1\145\3\13\1\30\1\3\1\33\1\45\1\34"+
    "\1\60\1\65\1\252\1\253\1\147\10\1\4\13\1\30\1\3\2\1\4\13\1\254\1\3\12\1\3"+
    "\13\1\255\1\62\1\256\2\1\4\13\1\257\1\3\2\1\3\13\1\25\1\3\3\1\1\13\1\77\1"+
    "\41\1\3\26\1\4\13\1\3\1\167\34\1\3\13\1\145\20\1\1\34\2\13\1\14\1\62\1\3\1"+
    "\1\1\210\1\13\1\210\1\130\1\200\64\1\71\13\1\3\6\1\6\13\1\117\1\1\14\13\1"+
    "\150\53\1\2\13\1\117\75\1\44\13\1\200\33\1\43\13\1\145\1\13\1\117\1\3\6\1"+
    "\1\13\1\40\1\147\3\13\1\200\1\150\1\3\1\224\1\260\1\13\67\1\4\13\1\147\2\13"+
    "\1\117\1\167\1\13\4\1\1\62\1\1\76\13\1\131\1\1\57\13\1\31\20\1\1\16\77\1\6"+
    "\13\1\30\1\131\1\145\1\261\114\1\1\262\1\263\1\264\1\1\1\265\11\1\1\266\33"+
    "\1\5\13\1\132\3\13\1\146\1\267\1\270\1\271\3\13\1\272\1\273\1\13\1\274\1\275"+
    "\1\76\24\13\1\255\1\13\1\76\1\135\1\13\1\135\1\13\1\132\1\13\1\132\1\117\1"+
    "\13\1\117\1\13\1\34\1\13\1\34\1\13\1\276\3\13\40\1\3\13\1\220\2\13\1\131\1"+
    "\277\1\300\1\155\1\4\25\1\1\14\1\211\1\301\75\1\14\13\1\147\1\200\2\1\4\13"+
    "\1\30\1\3\112\1\1\271\1\13\1\302\1\303\1\304\1\305\1\306\1\307\1\310\1\41"+
    "\1\311\1\41\47\1\1\13\1\3\1\13\1\3\1\13\1\3\47\1\55\13\1\200\2\1\103\13\1"+
    "\147\15\13\1\40\150\13\1\16\25\1\41\13\1\40\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3232 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\2\2\1\1\2\22\0\1\1\13\0\1\26\1\0\1\30\1\0\12\3\7\0\32\3\4\0\1"+
    "\3\1\0\1\21\1\22\1\24\1\3\1\5\1\3\1\23\1\4\1\12\1\3\1\17\1\6\1\11\1\15\1\14"+
    "\1\7\1\3\1\10\1\13\1\20\1\16\2\3\1\25\2\3\1\27\11\0\1\1\12\0\1\1\11\0\1\3"+
    "\12\0\1\3\4\0\1\3\5\0\27\3\1\0\12\3\4\0\14\3\16\0\5\3\7\0\1\3\1\0\1\3\1\0"+
    "\5\3\1\0\2\3\2\0\4\3\1\0\1\3\6\0\1\3\1\0\3\3\1\0\1\3\1\0\4\3\1\0\23\3\1\0"+
    "\20\3\2\0\1\3\6\0\10\3\10\0\16\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\1\3\10\0\13\3"+
    "\5\0\3\3\15\0\12\3\4\0\6\3\1\0\10\3\2\0\12\3\1\0\23\3\2\0\14\3\2\0\11\3\4"+
    "\0\1\3\5\0\16\3\2\0\14\3\4\0\5\3\1\0\10\3\6\0\20\3\2\0\13\3\2\0\16\3\1\0\1"+
    "\3\3\0\4\3\2\0\11\3\2\0\2\3\2\0\4\3\10\0\1\3\4\0\2\3\1\0\1\3\1\0\3\3\1\0\6"+
    "\3\4\0\2\3\1\0\2\3\1\0\2\3\1\0\2\3\2\0\1\3\1\0\5\3\4\0\2\3\2\0\3\3\3\0\1\3"+
    "\7\0\4\3\1\0\1\3\7\0\20\3\13\0\3\3\1\0\11\3\1\0\2\3\1\0\2\3\1\0\5\3\2\0\12"+
    "\3\1\0\3\3\1\0\3\3\2\0\1\3\30\0\1\3\7\0\3\3\1\0\10\3\2\0\6\3\2\0\2\3\2\0\3"+
    "\3\10\0\2\3\4\0\2\3\1\0\1\3\1\0\1\3\20\0\2\3\1\0\6\3\3\0\3\3\1\0\4\3\3\0\2"+
    "\3\1\0\1\3\1\0\2\3\3\0\2\3\3\0\3\3\3\0\5\3\3\0\3\3\1\0\4\3\2\0\1\3\6\0\1\3"+
    "\10\0\4\3\1\0\10\3\1\0\3\3\1\0\30\3\3\0\10\3\1\0\3\3\1\0\4\3\7\0\2\3\1\0\3"+
    "\3\5\0\4\3\1\0\5\3\2\0\4\3\5\0\2\3\7\0\1\3\2\0\2\3\16\0\3\3\1\0\10\3\1\0\7"+
    "\3\1\0\3\3\1\0\5\3\5\0\4\3\7\0\1\3\12\0\6\3\2\0\2\3\1\0\22\3\3\0\10\3\1\0"+
    "\11\3\1\0\1\3\2\0\7\3\3\0\1\3\4\0\6\3\1\0\1\3\1\0\10\3\2\0\2\3\14\0\17\3\2"+
    "\0\2\3\1\0\1\3\2\0\2\3\1\0\1\3\2\0\1\3\6\0\4\3\1\0\7\3\1\0\3\3\1\0\1\3\1\0"+
    "\1\3\2\0\2\3\1\0\15\3\1\0\3\3\2\0\5\3\1\0\1\3\1\0\6\3\2\0\12\3\2\0\4\3\10"+
    "\0\2\3\13\0\1\3\1\0\1\3\1\0\1\3\4\0\12\3\1\0\24\3\3\0\5\3\1\0\12\3\6\0\1\3"+
    "\11\0\6\3\1\0\1\3\5\0\1\3\2\0\13\3\1\0\15\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4"+
    "\3\2\0\1\3\1\0\4\3\2\0\7\3\1\0\1\3\1\0\4\3\2\0\16\3\2\0\6\3\2\0\1\1\32\3\3"+
    "\0\13\3\7\0\15\3\1\0\7\3\13\0\4\3\14\0\1\3\1\0\2\3\14\0\4\3\3\0\1\3\4\0\2"+
    "\3\15\0\3\3\11\0\1\3\23\0\10\3\1\0\23\3\1\0\2\3\6\0\6\3\5\0\15\3\1\0\1\3\1"+
    "\0\1\3\1\0\1\3\1\0\6\3\1\0\7\3\1\0\1\3\3\0\3\3\1\0\7\3\3\0\4\3\2\0\6\3\4\0"+
    "\13\1\15\0\2\1\5\0\1\1\17\0\1\3\4\0\1\3\12\0\1\1\1\0\1\3\15\0\1\3\2\0\1\3"+
    "\4\0\1\3\2\0\12\3\1\0\1\3\3\0\5\3\6\0\1\3\1\0\1\3\1\0\1\3\1\0\4\3\1\0\1\3"+
    "\5\0\5\3\4\0\1\3\1\0\5\3\6\0\15\3\7\0\10\3\11\0\7\3\1\0\7\3\1\0\1\1\4\0\3"+
    "\3\11\0\5\3\2\0\5\3\3\0\7\3\2\0\2\3\2\0\3\3\5\0\16\3\1\0\12\3\1\0\1\3\7\0"+
    "\11\3\2\0\27\3\2\0\15\3\3\0\1\3\1\0\1\3\2\0\1\3\16\0\1\3\2\0\5\3\12\0\6\3"+
    "\2\0\6\3\2\0\6\3\11\0\13\3\1\0\2\3\2\0\7\3\4\0\5\3\3\0\5\3\5\0\12\3\1\0\5"+
    "\3\1\0\1\3\1\0\2\3\1\0\2\3\1\0\12\3\3\0\15\3\3\0\2\3\30\0\3\3\2\0\6\3\2\0"+
    "\6\3\2\0\6\3\2\0\3\3\3\0\14\3\1\0\16\3\1\0\2\3\1\0\1\3\15\0\1\3\2\0\4\3\4"+
    "\0\10\3\1\0\5\3\12\0\6\3\2\0\1\3\1\0\14\3\1\0\2\3\3\0\1\3\2\0\4\3\1\0\2\3"+
    "\12\0\10\3\6\0\6\3\1\0\2\3\5\0\10\3\1\0\3\3\1\0\13\3\4\0\3\3\4\0\5\3\2\0\1"+
    "\3\11\0\5\3\5\0\3\3\3\0\13\3\1\0\1\3\3\0\10\3\6\0\1\3\1\0\7\3\1\0\1\3\1\0"+
    "\4\3\1\0\2\3\6\0\1\3\5\0\7\3\2\0\7\3\3\0\6\3\1\0\1\3\10\0\6\3\2\0\10\3\10"+
    "\0\6\3\2\0\1\3\3\0\1\3\13\0\10\3\5\0\15\3\3\0\2\3\6\0\5\3\3\0\6\3\10\0\10"+
    "\3\2\0\7\3\16\0\4\3\4\0\3\3\15\0\1\3\2\0\2\3\2\0\4\3\1\0\14\3\1\0\1\3\1\0"+
    "\7\3\1\0\21\3\1\0\4\3\2\0\10\3\1\0\7\3\1\0\14\3\1\0\4\3\1\0\5\3\1\0\1\3\3"+
    "\0\11\3\1\0\10\3\2\0\2\3\5\0\1\3\16\0\1\3\13\0\2\3\1\0\2\3\1\0\5\3\6\0\2\3"+
    "\1\0\1\3\2\0\1\3\1\0\12\3\1\0\4\3\1\0\1\3\1\0\1\3\6\0\1\3\4\0\1\3\1\0\1\3"+
    "\1\0\1\3\1\0\3\3\1\0\2\3\1\0\1\3\2\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1\0\1\3\1"+
    "\0\2\3\1\0\1\3\2\0\4\3\1\0\7\3\1\0\4\3\1\0\4\3\1\0\1\3\1\0\12\3\1\0\5\3\1"+
    "\0\3\3\1\0\5\3\1\0\5\3");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\17\0\1\1\1\2\7\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\21\3\1\25\1\26"+
    "\4\3\1\27\5\3\1\30\4\3\1\31\1\32\2\3"+
    "\1\33\1\34\2\3\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\144\0\175\0\226\0\257"+
    "\0\310\0\341\0\372\0\u0113\0\u012c\0\u0145\0\u015e\0\u0177"+
    "\0\u0177\0\u0190\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d\0\u0226"+
    "\0\u0177\0\u023f\0\u0177\0\u0177\0\u0177\0\u0177\0\u0258\0\u0177"+
    "\0\u0271\0\u0177\0\u0177\0\u0177\0\u028a\0\u0177\0\u02a3\0\u0177"+
    "\0\u02bc\0\u02d5\0\u02ee\0\u0307\0\u0320\0\u0339\0\u0352\0\u036b"+
    "\0\u0384\0\u039d\0\u03b6\0\u03cf\0\u03e8\0\u0401\0\u041a\0\u0433"+
    "\0\u044c\0\u0465\0\u0190\0\u0190\0\u047e\0\u0497\0\u04b0\0\u04c9"+
    "\0\u0190\0\u04e2\0\u04fb\0\u0514\0\u052d\0\u0546\0\u0190\0\u055f"+
    "\0\u0578\0\u0591\0\u05aa\0\u0190\0\u0190\0\u05c3\0\u05dc\0\u0190"+
    "\0\u0190\0\u05f5\0\u060e\0\u0190";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\20\1\21\1\22\1\23\2\22\1\24\5\22\1\25"+
    "\1\26\2\22\1\27\2\22\1\30\1\22\4\20\1\31"+
    "\1\21\23\32\1\33\1\34\3\20\1\21\27\20\1\35"+
    "\1\36\27\20\1\31\1\36\23\37\4\20\1\40\1\36"+
    "\30\20\1\36\23\41\2\20\1\42\1\20\1\43\1\36"+
    "\30\20\1\36\27\20\1\44\1\36\30\20\1\36\23\45"+
    "\4\20\1\46\1\36\27\20\1\31\1\36\23\47\4\20"+
    "\1\50\1\36\27\20\1\31\1\36\23\51\3\20\34\0"+
    "\23\22\6\0\2\22\1\52\6\22\1\53\11\22\6\0"+
    "\2\22\1\54\6\22\1\55\11\22\6\0\11\22\1\56"+
    "\11\22\6\0\10\22\1\57\12\22\6\0\10\22\1\60"+
    "\12\22\6\0\11\22\1\61\11\22\6\0\23\32\6\0"+
    "\23\37\6\0\23\41\6\0\23\45\6\0\23\47\6\0"+
    "\23\51\6\0\3\22\1\62\17\22\6\0\11\22\1\63"+
    "\11\22\6\0\5\22\1\64\15\22\6\0\10\22\1\65"+
    "\12\22\6\0\1\22\1\66\13\22\1\67\5\22\6\0"+
    "\2\22\1\70\20\22\6\0\10\22\1\71\12\22\6\0"+
    "\12\22\1\72\10\22\6\0\4\22\1\73\16\22\6\0"+
    "\14\22\1\74\6\22\6\0\6\22\1\75\14\22\6\0"+
    "\15\22\1\76\5\22\6\0\2\22\1\77\20\22\6\0"+
    "\16\22\1\100\4\22\6\0\5\22\1\101\15\22\6\0"+
    "\2\22\1\102\20\22\6\0\15\22\1\103\5\22\6\0"+
    "\7\22\1\104\13\22\6\0\16\22\1\105\4\22\6\0"+
    "\3\22\1\106\17\22\6\0\17\22\1\107\3\22\6\0"+
    "\5\22\1\110\15\22\6\0\2\22\1\111\20\22\6\0"+
    "\10\22\1\112\12\22\6\0\5\22\1\113\15\22\6\0"+
    "\4\22\1\114\16\22\6\0\15\22\1\115\5\22\6\0"+
    "\22\22\1\116\6\0\10\22\1\117\12\22\6\0\20\22"+
    "\1\120\2\22\6\0\15\22\1\121\5\22\6\0\7\22"+
    "\1\122\13\22\6\0\11\22\1\123\11\22\6\0\12\22"+
    "\1\124\10\22\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1575];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\17\0\2\11\7\1\1\11\1\1\4\11\1\1\1\11"+
    "\1\1\3\11\1\1\1\11\1\1\1\11\54\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[84];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public RedLibCommandLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RedLibCommandLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 30: break;
          case 2: 
            { return NEWLINE;
            } 
            // fall through
          case 31: break;
          case 3: 
            { yybegin(COMMAND);return COMMANDNAME;
            } 
            // fall through
          case 32: break;
          case 4: 
            { return SPACE;
            } 
            // fall through
          case 33: break;
          case 5: 
            { return ALIAS;
            } 
            // fall through
          case 34: break;
          case 6: 
            { return ALIASSEPARATOR;
            } 
            // fall through
          case 35: break;
          case 7: 
            { yybegin(YYINITIAL);return OBRACKET;
            } 
            // fall through
          case 36: break;
          case 8: 
            { yybegin(HELPVALUE);return SEPARATOR;
            } 
            // fall through
          case 37: break;
          case 9: 
            { yybegin(YYINITIAL);return NEWLINE;
            } 
            // fall through
          case 38: break;
          case 10: 
            { return HELPMESSAGE;
            } 
            // fall through
          case 39: break;
          case 11: 
            { yybegin(PERMISSIONVALUE);return SEPARATOR;
            } 
            // fall through
          case 40: break;
          case 12: 
            { return PERMISSION_VALUE;
            } 
            // fall through
          case 41: break;
          case 13: 
            { return DOT;
            } 
            // fall through
          case 42: break;
          case 14: 
            { yybegin(USERVALUE);return SEPARATOR;
            } 
            // fall through
          case 43: break;
          case 15: 
            { yybegin(HOOKVALUE);return SEPARATOR;
            } 
            // fall through
          case 44: break;
          case 16: 
            { return HOOKNAME;
            } 
            // fall through
          case 45: break;
          case 17: 
            { yybegin(CONTEXTVALUE);return SEPARATOR;
            } 
            // fall through
          case 46: break;
          case 18: 
            { return CONTEXTNAME;
            } 
            // fall through
          case 47: break;
          case 19: 
            { yybegin(ASSERTVALUE);return SEPARATOR;
            } 
            // fall through
          case 48: break;
          case 20: 
            { return ASSERTNAME;
            } 
            // fall through
          case 49: break;
          case 21: 
            { yybegin(HELP);return RedLibCommandTypes.HELP;
            } 
            // fall through
          case 50: break;
          case 22: 
            { yybegin(HOOK);return RedLibCommandTypes.HOOK;
            } 
            // fall through
          case 51: break;
          case 23: 
            { yybegin(USER);return RedLibCommandTypes.USER;
            } 
            // fall through
          case 52: break;
          case 24: 
            { yybegin(NOARG);return NOTAB;
            } 
            // fall through
          case 53: break;
          case 25: 
            { yybegin(NOARG);return NOHELP;
            } 
            // fall through
          case 54: break;
          case 26: 
            { yybegin(ASSERT);return RedLibCommandTypes.ASSERT;
            } 
            // fall through
          case 55: break;
          case 27: 
            { yybegin(NOARG);return POSTARG;
            } 
            // fall through
          case 56: break;
          case 28: 
            { yybegin(CONTEXT);return RedLibCommandTypes.CONTEXT;
            } 
            // fall through
          case 57: break;
          case 29: 
            { yybegin(PERMISSION);return RedLibCommandTypes.PERMISSION;
            } 
            // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
